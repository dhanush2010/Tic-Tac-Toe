# -*- coding: utf-8 -*-
"""tic_tac_toe_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HyEenGGIX2FXNS7hG9tgcZIUpAfUeE7I
"""

import streamlit as st

# ---- Force-reset if session state is corrupted ----
if 'board' not in st.session_state or not isinstance(st.session_state.board, list) or len(st.session_state.board) != 3:
    st.session_state.clear()  # 💥 Completely clear session state
    st.session_state.board = [[0 for _ in range(3)] for _ in range(3)]
    st.session_state.turn = -1
    st.session_state.gameover = False
    st.session_state.message = "Player X's turn"
    st.session_state.X_score = 0
    st.session_state.O_score = 0
    st.session_state.tie_score = 0

def check_winner(board):
    for i in range(3):
        if abs(sum(board[i])) == 3:
            return board[i][0]
        if abs(board[0][i] + board[1][i] + board[2][i]) == 3:
            return board[0][i]
    if abs(board[0][0] + board[1][1] + board[2][2]) == 3:
        return board[0][0]
    if abs(board[0][2] + board[1][1] + board[2][0]) == 3:
        return board[0][2]
    if all(cell != 0 for row in board for cell in row):
        return 0  # Tie
    return None

def reset():
    st.session_state.board = [[0 for _ in range(3)] for _ in range(3)]
    st.session_state.turn = -1
    st.session_state.gameover = False
    st.session_state.message = "Player X's turn"

st.title("🎮 Tic Tac Toe (Streamlit Version)")

# Game grid UI
for i in range(3):
    cols = st.columns(3)
    for j in range(3):
        cell = st.session_state.board[i][j]
        label = "X" if cell == -1 else "O" if cell == 1 else " "
        if cols[j].button(label, key=f"{i}-{j}", disabled=st.session_state.gameover or cell != 0):
            if not st.session_state.gameover:
                st.session_state.board[i][j] = st.session_state.turn
                winner = check_winner(st.session_state.board)
                if winner is not None:
                    st.session_state.gameover = True
                    if winner == -1:
                        st.session_state.X_score += 1
                        st.session_state.message = "🎉 Player X wins!"
                    elif winner == 1:
                        st.session_state.O_score += 1
                        st.session_state.message = "🎉 Player O wins!"
                    else:
                        st.session_state.tie_score += 1
                        st.session_state.message = "🤝 It's a tie!"
                else:
                    st.session_state.turn *= -1
                    st.session_state.message = "Player X's turn" if st.session_state.turn == -1 else "Player O's turn"

# Status and scoreboard
st.subheader(st.session_state.message)

st.markdown("### 🧮 Scoreboard")
st.write(f"Player X: {st.session_state.X_score}")
st.write(f"Player O: {st.session_state.O_score}")
st.write(f"Ties   : {st.session_state.tie_score}")

# Reset button
if st.button("🔁 Restart Game"):
    reset()